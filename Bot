echo "# Mickol" >> README.md
git init
git add README.md
git commit -m "first commit"
git branch -M main
git remote add origin https://github.com/Mickol00/Mickol.git
git push -u origin main
import discord
import os
import sys
import json
import asyncio
from discord.ext import commands
import random
import aiohttp
import time
import discord
import logging
import os
import sys
from datetime import datetime
import json
import random
import re
import string
import requests
from flask import Flask, request
app = Flask(__name__)
@app.route("/")
def index():
  return "Hello, world!"
@app.route("/<string:name>")
def hello(name):
  return "Hello, " + name + "!"
if __name__ == "__main__":
app.run()
@app.route("/<string:name>")
@app.route("/<int:num>")
def add(num):
  return num + 1
@app.route("/sub/<int:num>")
def sub(num):
  return num - 1
@app.route("/mult/<int:num>")
def mult(num):
  return num * 2
@app.route("/div/<int:num>")
def div(num):
  return num / 2
@app.route("/factorial/<int:num>")

def factorial(num):
  if num == 0:
    return 1
  return num * factorial(num - 1)
@app.route("/fibonacci/<int:num>")


def fibonacci(num):
  if num == 0:
    return 0
  elif num == 1:
    return 1
  else:
    return fibonacci(num - 1) + fibonacci(num - 2)
  @app.route("/isprime/<int:num>")

def isprime(num):
  for i in range(2, num):
    if num % i == 0:
      return False
    return True
  @app.route("/primenumbers/<int:num>")

def primenumbers(num):
  a = []
  for i in range(2, num + 1):
    if isprime(i):
      a.append(i)
      return a
    @app.route("/lcm/<int:num1>/<int:num2>")

def primenumbers(num):
  a = []
   for i in range(2, num + 1):
     if isprime(i):  
       a.append(i)
       return a
      @app.route("/lcm/<int:num1>/<int:num2>")

def lcm(num1, num2):
 if num1 > num2:
   greater = num1
   else:
     greater = num2
     while(True):
       if((greater % num1 == 0) and (greater % num2 == 0)):
         lcm = greater
         break
        greater += 1
        return lcm
@app.route("/hcf/<int:num1>/<int:num2>")
def hcf(num1, num2):
  if num1 > num2:
    small = num2
    else:
      small = num1
    for i in range(1, small+1):
      if((num1 % i == 0) and (num2 % i == 0)):
        hcf = i
        return hcf
      @app.route("/gcd/<int:num1>/<int:num2>")
      @app.route("/reverse/<string:text>")
      def reverse(text):
        return text[::-1]
      @app.route("/palindrome/<string:text>")
      def palindrome(text):
        return text == text[::-1]
      @app.route("/anagram/<string:text1>/<string:text2>")
      def anagram(text1, text2):
        return sorted(text1) == sorted(text2)
